<head>
    <link rel="stylesheet" href="~/css/Posts.css" asp-append-version="true" />

    <link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
<link href="https://fonts.googleapis.com/css2?family=Poppins:ital,wght@0,100;0,200;0,300;0,400;0,500;0,600;0,700;0,800;0,900;1,100;1,200;1,300;1,400;1,500;1,600;1,700;1,800;1,900&display=swap" rel="stylesheet">


<script>
function submitLike(event) {
        event.preventDefault();

        const form = event.target.closest('form');
        const formData = new FormData(form);

        const likesCountElement = document.getElementById('likes-count-' + formData.get('postId'));
        //console.log(event)
        fetch(form.action, {
            method: form.method,
            body: formData
        })
        .then(response => response.json())
        .then(result => {
            // Update the likes count element's content with the new count from the server
            likesCountElement.textContent = result;
        })
        .catch(error => {
            // Error callback (optional)
        });
    }

function deletePost(postId) {
    console.log("Deleting post with ID: " + postId);

    const requestData = JSON.stringify({ postId: postId });
    console.log("Request body: ", requestData);  // Log request body for debugging

    fetch('/DeletePost', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: requestData // Send postId as JSON
    })
    .then(response => response.json())
    .then(data => {
        console.log('Response from server:', data); // Log the server response
        if (data.success) {
            // Successfully deleted post, now remove it from the UI
            const postElement = document.getElementById('post-' + postId);  // Assuming each post has an ID
            if (postElement) {
                postElement.remove();  // Remove the post element from the DOM
            }
            // Fetch updated posts and update the UI
            fetchPosts();
        } else {
            alert('Error: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error:', error);
    });
}

function fetchPosts() {
    // Fetch the updated posts list
    fetch('/posts')
        .then(response => response.text())
        .then(html => {
            // Find the main-post container and extract the posts section from the HTML
            const mainPostContainer = document.querySelector('.main-post');
            
            if (mainPostContainer) {
                // Parse the returned HTML to get the updated posts content
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                
                // Find the new posts container in the response (the part we want to update)
                const newPosts = doc.querySelector('.main-post').innerHTML;
                // Update only the posts part of the page
                mainPostContainer.innerHTML = newPosts;
            }
        })
        .catch(error => {
            console.error('Error fetching posts:', error);
        });
}
</script>



</head>
<body class="poppins-regular">
   <div class="master-div">
<div class="post-box">
    @* <h1 id="title-name">Posts</h1> *@

<!-- Post Form -->
<form action="/posts" method="post">
    <input type="text" name="content" placeholder="Write a post..." class="write-post" />
    <input type="submit" id='submit' value="Post" />
</form>  
</div>

<div class="main-post">
    
    @foreach (Post post in ViewBag.Posts)
    {
        <div class="single-post">
    <div class="post">
        <p class="post-area"><strong>@post.User.Name</strong>: @post.Content</p>
        <div class="date-comment">@post.CreatedAt</div>
     <div class="like-box">
            <form action="/IncrementLike" method="post" onsubmit="preventDefaultAndSubmit(event)">
        <input type="hidden" name="postId" value="@post.Id" />
        <input class="bee-like" type="image" src="@Url.Content("~/img/bee.png")" alt="Like" class="like-button" onclick="submitLike(event)">
            </form>
    <div id="likes-count-@post.Id">
        @post.LikesCount
    </div>
    
          <div class="delete-div"><button class="delete-post" onclick="deletePost(@post.Id)">Delete Post</button> </div>  
    </div>
        </div>
          <div class="comment-form">
              <form action="/comments" method="post">
                  <input type="hidden" name="postId" value="@post.Id" /> <!-- Attach comment to post -->
                  <input type="text" name="commentContent" placeholder="Write a comment..." />
                  <input type="submit" value="Comment" />
              </form>
          </div>
        <!-- Display Comments for this Post -->
        <div class="comments">
            @if (post.Comments != null && post.Comments.Any())
            {
                foreach (Comment comment in post.Comments)
                {
                    <div class="one-comment">
                        <p id="comment-box"><strong id="comment-zone">@comment.User.Name</strong>: @comment.Comments</p>
                        <p class="comment-dt">@comment.DateTime</p>
                    </div>
                
                }
            }
        </div>
        </div> 
    }
</div>

</body>